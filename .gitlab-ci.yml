
#### constants ####

variables:
  # dependency versions
  BOOST_VERSION: 1.80.0
  SOPLEX_REVISION: release-712
  SCIP_REVISION: v920
  HIGHS_REVISION: v1.7.0
  OR_TOOLS_REVISION: v9.10

  # project directories
  SETUP_DIR: ${CI_PROJECT_DIR}/setups
  BUILD_DIR: ${CI_PROJECT_DIR}/builds
  INSTALL_DIR: ${CI_PROJECT_DIR}/../installs

  # source directories
  BOOST_DIR: ${SETUP_DIR}/boost
  SOPLEX_DIR: ${SETUP_DIR}/soplex
  SCIP_DIR: ${SETUP_DIR}/scip
  HIGHS_DIR: ${SETUP_DIR}/highs
  ROUNDINGSAT_DIR: ${SETUP_DIR}/roundingsat

#### stages ####

stages:
  - setup
  - test
  - integrate

#### setups ####

.common:
  rules:
    - if: $CI_MERGE_REQUEST_TITLE =~ /^Draft:/
      when: manual
    - if: $CI_MERGE_REQUEST_ID
  image:
    name: gcc:12
  # required to pick a reasonable runner
  tags:
    - compile
  before_script:
    - apt-get update
    - apt-get install -y cmake libtbb-dev libmpfr-dev libcriterion-dev
    - export CFLAGS="-Werror"
    - export CXXFLAGS="-Werror"
    - export LD_LIBRARY_PATH=${INSTALL_DIR}/lib:${LD_LIBRARY_PATH}
    - export CMAKE_PREFIX_PATH=${INSTALL_DIR}
    - mkdir -p ${CI_PROJECT_DIR}/installs
    - mv ${CI_PROJECT_DIR}/installs ${INSTALL_DIR}
  after_script:
    - mv ${INSTALL_DIR} ${CI_PROJECT_DIR}/installs

boost-setup:
  extends: .common
  stage: setup
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/installs
    expire_in: 1 minute
  script:
    - mkdir -p ${BOOST_DIR}
    - export CFLAGS=""
    - export CXXFLAGS=""
    - wget https://boostorg.jfrog.io/artifactory/main/release/${BOOST_VERSION}/source/boost_$(echo ${BOOST_VERSION} | tr . _).tar.gz -O ${BOOST_DIR}.tar.gz
    - tar -xzf ${BOOST_DIR}.tar.gz -C ${BOOST_DIR} --strip-components=1
    - cd ${BOOST_DIR}
    - ./bootstrap.sh --prefix=${INSTALL_DIR} --with-libraries=program_options,serialization,iostreams,regex
    - ./b2 --prefix=${INSTALL_DIR} -j8 install

papilo-setup:
  extends: .common
  stage: setup
  needs: [ boost-setup ]
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/installs
    expire_in: 1 minute
  script:
    - cmake ${CI_PROJECT_DIR} -DCMAKE_BUILD_TYPE=Debug -DSOPLEX=off -DSCIP=off -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
    - make -j8 install
    - ctest --output-on-failure -j8

soplex-setup:
  extends: .common
  stage: setup
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/installs
    expire_in: 1 minute
  script:
    - mkdir -p ${SETUP_DIR}
    - export CFLAGS=""
    - export CXXFLAGS=""
    - git clone https://github.com/scipopt/soplex.git ${SOPLEX_DIR}
    - cd ${SOPLEX_DIR}
    - git checkout ${SOPLEX_REVISION}
    - cmake . -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -DPAPILO=off
    - make -j8 install

check-cmakeconfig-includes:
  extends: .common
  stage: setup
  script:
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_HAVE_FLOAT128
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_HAVE_GMP
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_COMMAND_LINE_AVAILABLE
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_SERIALIZATION_AVAILABLE
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_HAVE_LUSOL
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_USE_STANDARD_HASHMAP
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_USE_BOOST_IOSTREAMS_WITH_ZLIB
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_USE_BOOST_IOSTREAMS_WITH_BZIP2
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_GITHASH_AVAILABLE
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} BOOST_FOUND
    - /bin/bash test/check_CmakeConfig_includes.sh ${CI_PROJECT_DIR} PAPILO_TBB

scip-setup:
  extends: .common
  stage: setup
  needs: [ soplex-setup ]
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/installs
    expire_in: 1 minute
  script:
    - mkdir -p ${SETUP_DIR}
    - export CFLAGS=""
    - export CXXFLAGS=""
    - git clone https://github.com/scipopt/scip.git ${SCIP_DIR}
    - mkdir ${SCIP_DIR}/build
    - cd ${SCIP_DIR}/build
    - git checkout ${SCIP_REVISION}
    - cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -DLPS=spx -DREADLINE=off -DZIMPL=off -DIPOPT=off -DPAPILO=off
    - make -j8 install

highs-setup:
  extends: .common
  stage: setup
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/installs
    expire_in: 1 minute
  when: manual
  allow_failure: true
  script:
    - mkdir -p ${SETUP_DIR}
    - export CFLAGS=""
    - export CXXFLAGS=""
    - git clone https://github.com/ERGO-Code/HiGHS ${HIGHS_DIR}
    - mkdir ${HIGHS_DIR}/build
    - cd ${HIGHS_DIR}/build
    - git checkout ${HIGHS_REVISION}
    - cmake .. -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
    - make -j8 install

#### defining tests ####

".scan-build":
  extends: .common
  stage: test
  script:
    - apt-get install -y clang clang-tools
    - mkdir -p ${BUILD_DIR}/${CI_JOB_NAME}
    - mkdir -p ${BUILD_DIR}/${CI_JOB_NAME}/build
    - cd ${BUILD_DIR}/${CI_JOB_NAME}/build
    - scan-build -o $CI_PROJECT/clangScanBuildReports cmake $CI_PROJECT_DIR -DCMAKE_BUILD_TYPE=Debug -DSOPLEX=off -DSCIP=off ${CMAKE_FLAGS}
    - scan-build -o $CI_PROJECT/clangScanBuildReports make -j6

".ctest":
  extends: .common
  stage: test
  script:
    - mkdir -p ${BUILD_DIR}/${CI_JOB_NAME}
    - cd ${BUILD_DIR}/${CI_JOB_NAME}
    - cmake ${CI_PROJECT_DIR} -DCMAKE_BUILD_TYPE=Debug -DSOPLEX=off -DSCIP=off ${CMAKE_FLAGS}
    - make -j8
    - ctest --output-on-failure -j8

".integration":
  extends: .common
  stage: integrate
  when: manual
  allow_failure: false
  script:
    - mkdir -p ${BUILD_DIR}/${CI_JOB_NAME}
    - git clone ${SOLVER_REPOSITORY} ${BUILD_DIR}/${CI_JOB_NAME}
    - mkdir ${BUILD_DIR}/${CI_JOB_NAME}/build
    - cd ${BUILD_DIR}/${CI_JOB_NAME}/build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug ${CMAKE_FLAGS}
    - make -j8
    - ctest --output-on-failure -j8

#### applying tests ####

"scan-build":
  extends: .scan-build
  needs: [ boost-setup ]
  variables:
    CMAKE_FLAGS: ""

"ctest_release":
  extends: .ctest
  needs: [ boost-setup ]
  variables:
    CMAKE_FLAGS: "-DCMAKE_BUILD_TYPE=Release"

"ctest_no_tbb":
  extends: .ctest
  needs: [ boost-setup ]
  variables:
    CMAKE_FLAGS: "-DTBB=off"

"ctest_soplex":
  extends: .ctest
  needs: [ boost-setup, soplex-setup ]
  variables:
    CMAKE_FLAGS: "-DSOPLEX=on"

"ctest_scip":
  extends: .ctest
  needs: [ boost-setup, scip-setup ]
  variables:
    CMAKE_FLAGS: "-DSCIP=on"

"ctest_highs":
  extends: .ctest
  needs: [ boost-setup, highs-setup ]
  allow_failure: true
  variables:
    CMAKE_FLAGS: "-DHIGHS=on"

"soplex_integration":
  extends: .integration
  needs: [ papilo-setup ]
  variables:
    SOLVER_REPOSITORY: "https://github.com/scipopt/soplex.git"
    CMAKE_FLAGS: "-DPAPILO=on"

"scip_integration":
  extends: .integration
  needs: [ papilo-setup, soplex-setup ]
  variables:
    SOLVER_REPOSITORY: "https://github.com/scipopt/scip.git"
    CMAKE_FLAGS: "-DLPS=spx -DREADLINE=off -DZIMPL=off -DIPOPT=off -DPAPILO=on"

##############################################
# TODOs: add tests and integrations of RoundingSAT/ORTools
##############################################

#".ctest_ortools":
#  extends: .common
#  stage: test
#  #build papilo in debug mode and link ortools and then run ctests
#  script:
#    # currently requires Cmake 3.20 but only 3.18 is installed
#    - mkdir -p ${BUILD_DIR}/${CI_JOB_NAME}
#    - git clone https://github.com/google/or-tools.git ${BUILD_DIR}/${CI_JOB_NAME}/ortools
#    - cd ${BUILD_DIR}/${CI_JOB_NAME}/ortools
#    - git checkout ${ORTOOLS_REVISION}
#    - cmake -S. -Bbuild -DBUILD_DEPS:BOOL=ON
#    - cmake --build build
#"ctest_ortools":
#  extends: .ctest_ortools
#  needs: [ boost-setup, scip-setup ]
#  when: manual
#  variables:
#    CMAKE_FLAGS: "-DSCIP=on"
#
#"roundingsat-setup":
#  extends: .common
#  stage: test
#  needs: [ boost-setup ]
#  when: manual
#  script:
#    - mkdir -p ${ROUNDINGSAT_DIR}
#    - export CFLAGS=""
#    - export CXXFLAGS=""
#    - wget https://gitlab.com/MIAOresearch/software/roundingsat/-/archive/master/roundingsat-master.tar.gz -P ${CI_PROJECT_DIR}
#    - tar -xf ${CI_PROJECT_DIR}/roundingsat-master.tar.gz -C ${ROUNDINGSAT_DIR} --strip-components=1
#    - cd ${ROUNDINGSAT_DIR}
#    - cmake . -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR}
#    - make -j8 install
#    #build papilo in debug mode and link roundingsat and then run ctests
